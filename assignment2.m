data = load("data_2.mat");
t = data.t;
signal = data.signal;
Fs = data.Fs;

%plotting the Raw signal
subplot(5,1,1);
plot(t,signal);
title("Raw EEG signal");
xlabel("Time");
ylabel("Amplitude");

[upper,lower] = envelope(signal,30*Fs,'rms');
hold on
plot(t,upper,t,lower,'linewidth',1.2)
set(gca,'ylim',[-0.03 0.03])
legend('signal','upper','lower')
hold off

%filter by delta
subplot(5,1,2);
delta_filtered = filter(delta,signal);
plot(t,delta_filtered);
title("delta filtered EEG signal");
xlabel("Time");
ylabel("Amplitude");
[upper,lower] = envelope(delta_filtered,30*Fs,'rms');
hold on
plot(t,upper,t,lower,'linewidth',1.2)
set(gca,'ylim',[-0.03 0.03])
legend('delta_filtered','upper','lower')
hold off

%filter by theta
subplot(5,1,3);
theta_filtered = filter(theta,signal);
plot(t,theta_filtered);
title("theta filtered EEG signal");
xlabel("Time");
ylabel("Amplitude");
[upper,lower] = envelope(theta_filtered,30*Fs,'rms');
hold on
plot(t,upper,t,lower,'linewidth',1.2)
set(gca,'ylim',[-0.03 0.03])
legend('theta_filtered','upper','lower')
hold off

%filter by alpha
subplot(5,1,4);
alpha_filtered = filter(alpha,signal);
plot(t,alpha_filtered);
title("alpha filtered EEG signal");
xlabel("Time");
ylabel("Amplitude");
[upper,lower] = envelope(alpha_filtered,30*Fs,'rms');
hold on
plot(t,upper,t,lower,'linewidth',1.2)
set(gca,'ylim',[-0.03 0.03])
legend('alpha_filtered','upper','lower')
hold off

%filter by beta
subplot(5,1,5);
beta_filtered = filter(beta,signal);
plot(t,alpha_filtered);
title("beta filtered EEG signal");
xlabel("Time");
ylabel("Amplitude");
[upper,lower] = envelope(beta_filtered,30*Fs,'rms');
hold on
plot(t,upper,t,lower,'linewidth',1.2)
set(gca,'ylim',[-0.03 0.03])
legend('beta_filtered','upper','lower')
hold off

%% 2. Spectrogram and relative powers

window = 30 * Fs;
overlap = 29 * Fs;
f = [0.1:0.1:32];
[S,F,T,P] = spectrogram(signal,window,overlap,f,Fs);

% relative powers calculation
%delta_band = [1, 4];
%theta_band = [4, 8];
%alpha_band = [8, 12];
%beta_band = [12, 25];

delta_ind = find(F >= 1 & F <= 4);
theta_ind = find(F >= 4 & F <= 8);
alpha_ind = find(F >= 8 & F <= 12);
beta_ind = find(F >= 12 & F <= 25);

P_tot = sum(P, 1);
delta_power = sum(P(delta_ind, :)) ./ P_tot;
theta_power = sum(P(theta_ind, :)) ./ P_tot;
alpha_power = sum(P(alpha_ind, :)) ./ P_tot;
beta_power = sum(P(beta_ind, :)) ./ P_tot;

figure;

% Plot the power spectral density estimates
subplot(3, 1, 1);
imagesc(T/60, F, log10(P), [-7 -3]);
axis xy;
xlabel('Time (min)');
ylabel('Frequency');
title('Power Spectral Density Estimates');

% Plotting relative powers
subplot(3, 1, 2);
hold on;
plot(T/60, delta_power, 'r');
plot(T/60, theta_power, 'g');
plot(T/60, alpha_power, 'b');
plot(T/60, beta_power, 'm');
hold off;
xlabel('Time in minutes');
ylabel('Relative_Power');
ylim([0, 1]);
legend('Delta', 'Theta', 'Alpha', 'Beta');
title('Relative Powers of delta theta alpha beta');

%% 3. Spectral entropy

fl = 0.1;
fh = 32;
indx = find(F >= fl & F <= fh);
SE = zeros(1, size(P, 2));

for t = 1:size(P, 2)
    P_normalize = P(indx, t) / sum(P(indx, t)); % Normalizing 
    SE(t) = -sum(P_normalize .* log2(P_normalize)); % spectral entropy calculation
end

figure;

% power spectral density estimates plotting
subplot(3, 1, 1);
imagesc(T/60, F, log10(P), [-7 -3]);
axis xy;
xlabel('Time in minutes');
ylabel('Frequency');
title('Power Spectral Density Estimates');

% Plot the relative powers
subplot(3, 1, 2);
hold on;
plot(T/60, delta_power, 'r');
plot(T/60, theta_power, 'g');
plot(T/60, alpha_power, 'b');
plot(T/60, beta_power, 'm');
hold off;
xlabel('Time in minutes');
ylabel('Relative_Power');
ylim([0, 1]);
legend('Delta', 'Theta', 'Alpha', 'Beta');
title('Relative Powers of delta theta alpha beta');

% Plot the relative powers
subplot(3, 1, 3);
plot(T/60, SE, 'r');
xlabel('Time in minutes');
ylabel('Spectral Entropy');
title('Spectral Entropy');


%% Generated_Filters

function Hd = delta
%DELTA Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.11 and Signal Processing Toolbox 8.7.
% Generated on: 04-Apr-2023 19:30:15

% FIR Window Bandpass filter designed using the FIR1 function.

% All frequency values are in Hz.
Fs = 200;  % Sampling Frequency

N    = 800;      % Order
Fc1  = 1;        % First Cutoff Frequency
Fc2  = 4;        % Second Cutoff Frequency
flag = 'scale';  % Sampling Flag
% Create the window vector for the design algorithm.
win = hamming(N+1);

% Calculate the coefficients using the FIR1 function.
b  = fir1(N, [Fc1 Fc2]/(Fs/2), 'bandpass', win, flag);
Hd = dfilt.dffir(b);

end

% [EOF]
%***********************************************************

function Hd = theta
%THETA Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.11 and Signal Processing Toolbox 8.7.
% Generated on: 04-Apr-2023 19:31:08

% FIR Window Bandpass filter designed using the FIR1 function.

% All frequency values are in Hz.
Fs = 200;  % Sampling Frequency

N    = 800;      % Order
Fc1  = 4;        % First Cutoff Frequency
Fc2  = 8;        % Second Cutoff Frequency
flag = 'scale';  % Sampling Flag
% Create the window vector for the design algorithm.
win = hamming(N+1);

% Calculate the coefficients using the FIR1 function.
b  = fir1(N, [Fc1 Fc2]/(Fs/2), 'bandpass', win, flag);
Hd = dfilt.dffir(b);
end

% [EOF]
%***********************************************************

function Hd = alpha
%ALPHA Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.11 and Signal Processing Toolbox 8.7.
% Generated on: 04-Apr-2023 19:31:57

% FIR Window Bandpass filter designed using the FIR1 function.

% All frequency values are in Hz.
Fs = 200;  % Sampling Frequency

N    = 800;      % Order
Fc1  = 8;        % First Cutoff Frequency
Fc2  = 12;       % Second Cutoff Frequency
flag = 'scale';  % Sampling Flag
% Create the window vector for the design algorithm.
win = hamming(N+1);

% Calculate the coefficients using the FIR1 function.
b  = fir1(N, [Fc1 Fc2]/(Fs/2), 'bandpass', win, flag);
Hd = dfilt.dffir(b);
end

% [EOF]
%********************************************************

function Hd = beta
%BETA Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.11 and Signal Processing Toolbox 8.7.
% Generated on: 04-Apr-2023 19:33:12

% FIR Window Bandpass filter designed using the FIR1 function.

% All frequency values are in Hz.
Fs = 200;  % Sampling Frequency

N    = 800;      % Order
Fc1  = 12;       % First Cutoff Frequency
Fc2  = 25;       % Second Cutoff Frequency
flag = 'scale';  % Sampling Flag
% Create the window vector for the design algorithm.
win = hamming(N+1);

% Calculate the coefficients using the FIR1 function.
b  = fir1(N, [Fc1 Fc2]/(Fs/2), 'bandpass', win, flag);
Hd = dfilt.dffir(b);
end

% [EOF]

